{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","components/TodosFilter.js","components/NewTodo.js","App.js","index.js"],"names":["TodoItem","todo","toggledCheck","deleteTask","id","title","completed","className","classnames","type","checked","onChange","evt","target","htmlFor","onClick","TodoList","todos","map","key","TodosFilter","filterTypes","filtered","filter","filterType","classNames","selected","data-filter","getAttribute","NewTodo","state","handleChangeInput","setState","value","getRandom","Math","random","handleSubmitTodo","preventDefault","trim","props","addTodo","this","onSubmit","placeholder","name","Component","filterTodos","App","visibleTodos","allTodos","prevState","filterItems","clearCompleted","checkedAll","todosFromStorage","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","activeTodos","length","every","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.101e2e1c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst TodoItem = ({ todo, toggledCheck, deleteTask }) => {\n  const { id, title, completed } = todo;\n\n  return (\n    <li className={classnames({\n      completed,\n    })}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={completed}\n          id={id}\n          onChange={evt => toggledCheck(evt.target.checked)}\n        />\n        <label htmlFor={id}>{title}</label>\n        <button type=\"button\" className=\"destroy\" onClick={deleteTask} />\n      </div>\n      <input type=\"text\" className=\"edit\" />\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  deleteTask: PropTypes.func.isRequired,\n  toggledCheck: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({ todos, toggledCheck, deleteTask }) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <TodoItem\n        key={todo.id}\n        todo={todo}\n        toggledCheck={checked => toggledCheck(todo.id, checked)}\n        deleteTask={() => deleteTask(todo.id)}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n  deleteTask: PropTypes.func.isRequired,\n  toggledCheck: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst TodosFilter = ({ filterTypes, filtered, filter }) => (\n  <ul className=\"filters\">\n    {filterTypes.map(filterType => (\n      <li key={filterType}>\n        <button\n          type=\"button\"\n          className={\n            classNames({ selected: filter === filterType })\n          }\n          data-filter={filterType}\n          onClick={evt => filtered(evt.target.getAttribute('data-filter'))}\n        >\n          {filterType}\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nTodosFilter.propTypes = {\n  filterTypes: PropTypes.arrayOf(\n    PropTypes.string.isRequired,\n  ).isRequired,\n  filtered: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n\nexport default TodosFilter;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass NewTodo extends Component {\n  state = {\n    title: '',\n  }\n\n  handleChangeInput = (evt) => {\n    this.setState({\n      title: evt.target.value,\n    });\n  }\n\n  getRandom = () => (1 + Math.random());\n\n  handleSubmitTodo = (evt) => {\n    evt.preventDefault();\n\n    if (this.state.title.trim() !== '') {\n      const todo = {\n        id: `${this.getRandom()}`,\n        title: this.state.title,\n        completed: false,\n      };\n\n      this.props.addTodo(todo);\n\n      this.setState({\n        title: '',\n      });\n    }\n  }\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmitTodo}>\n        <input\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          name={title}\n          value={title}\n          onChange={this.handleChangeInput}\n        />\n      </form>\n    );\n  }\n}\n\nNewTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n\nexport default NewTodo;\n","import React from 'react';\nimport TodoList from './components/TodoList';\nimport TodosFilter from './components/TodosFilter';\nimport NewTodo from './components/NewTodo';\n\nconst filterTypes = ['All', 'Active', 'Completed'];\n\nconst filterTodos = (todos, filter) => {\n  if (filter === 'Active') {\n    return todos.filter(todo => !todo.completed);\n  }\n\n  if (filter === 'Completed') {\n    return todos.filter(todo => todo.completed);\n  }\n\n  return todos;\n};\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    visibleTodos: [],\n    filter: 'All',\n  }\n\n  componentDidMount() {\n    const todosFromStorage = localStorage.getItem('todos');\n\n    if (todosFromStorage) {\n      const todos = JSON.parse(todosFromStorage);\n\n      this.setState({ todos });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { todos } = this.state;\n\n    if (prevState.todos !== todos) {\n      localStorage.setItem('todos', JSON.stringify(this.state.todos));\n    }\n  }\n\n  addTodo = (todo) => {\n    const { filter, todos } = this.state;\n\n    this.setState(() => {\n      const allTodos = [...todos, todo];\n\n      return {\n        todos: allTodos,\n        visibleTodos: filterTodos(allTodos, filter),\n      };\n    });\n  }\n\n  toggledCheck = (id, checked) => {\n    const { filter } = this.state;\n\n    this.setState((prevState) => {\n      const allTodos = prevState.todos.map(todo => (\n        todo.id === id\n          ? {\n            ...todo,\n            completed: checked,\n          }\n          : todo\n      ));\n\n      return {\n        todos: allTodos,\n        visibleTodos: filterTodos(allTodos, filter),\n      };\n    });\n  }\n\n  filterItems = (filter) => {\n    const { todos } = this.state;\n\n    this.setState(() => {\n      const allTodos = [...todos];\n\n      return {\n        visibleTodos: filterTodos(allTodos, filter),\n        filter,\n      };\n    });\n  }\n\n  deleteTask = (id) => {\n    const { filter } = this.state;\n\n    this.setState((prevState) => {\n      const allTodos = prevState.todos.filter(todo => todo.id !== id);\n\n      return {\n        todos: allTodos,\n        visibleTodos: filterTodos(allTodos, filter),\n      };\n    });\n  }\n\n  clearCompleted = () => {\n    const { filter } = this.state;\n\n    this.setState((prevState) => {\n      const allTodos = prevState.todos.filter(todo => !todo.completed);\n\n      return {\n        todos: allTodos,\n        visibleTodos: filterTodos(allTodos, filter),\n      };\n    });\n  }\n\n  checkedAll = ({ target }) => {\n    const { checked } = target;\n\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => ({\n        ...todo,\n        completed: checked,\n      })),\n      visibleTodos: prevState.todos.map(todo => ({\n        ...todo,\n        completed: checked,\n      })),\n    }));\n  }\n\n  render() {\n    const { todos, visibleTodos, filter } = this.state;\n    const activeTodos = todos.filter(todo => !todo.completed);\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <NewTodo addTodo={this.addTodo} />\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            checked={todos.length && todos.every(todo => todo.completed)}\n            onClick={this.checkedAll}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          <TodoList\n            todos={visibleTodos}\n            toggledCheck={this.toggledCheck}\n            deleteTask={this.deleteTask}\n          />\n        </section>\n\n        {todos.length > 0 && (\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {`${activeTodos.length} items left`}\n            </span>\n            <TodosFilter\n              filtered={this.filterItems}\n              filterTypes={filterTypes}\n              filter={filter}\n            />\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={this.clearCompleted}\n            >\n              Clear completed\n            </button>\n          </footer>\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}