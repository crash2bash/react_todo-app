{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","components/TodosFilter.js","components/NewTodo.js","App.js","index.js"],"names":["TodoItem","todo","toggledCheck","deleteTask","id","title","completed","className","type","checked","onChange","evt","target","htmlFor","onClick","TodoList","todos","map","key","TodosFilter","filterTypes","filtered","filter","filterType","classNames","selected","data-filter","NewTodo","state","handleChangeInput","setState","value","getRandom","Math","random","handleSubmitTodo","preventDefault","trim","props","addTodo","this","onSubmit","placeholder","name","Component","filterTodos","App","visibleTodos","allTodos","prevState","getAttribute","clearCompleted","checkedAll","activeTodos","length","every","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b6fb197a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodoItem = ({ todo, toggledCheck, deleteTask }) => {\n  const { id, title, completed } = todo;\n\n  return (\n    <li>\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={completed}\n          id={id}\n          onChange={evt => toggledCheck(evt.target.checked)}\n        />\n        <label htmlFor={id}>{title}</label>\n        <button type=\"button\" className=\"destroy\" onClick={deleteTask} />\n      </div>\n      <input type=\"text\" className=\"edit\" />\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  deleteTask: PropTypes.func.isRequired,\n  toggledCheck: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({ todos, toggledCheck, deleteTask }) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <TodoItem\n        key={todo.id}\n        todo={todo}\n        toggledCheck={checked => toggledCheck(todo.id, checked)}\n        deleteTask={() => deleteTask(todo.id)}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n  deleteTask: PropTypes.func.isRequired,\n  toggledCheck: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst TodosFilter = ({ filterTypes, filtered, filter }) => (\n  <ul className=\"filters\">\n    {filterTypes.map(filterType => (\n      <li key={filterType}>\n        <button\n          type=\"button\"\n          className={\n            classNames({ selected: filter === filterType })\n          }\n          data-filter={filterType}\n          onClick={filtered}\n        >\n          {filterType}\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nTodosFilter.propTypes = {\n  filterTypes: PropTypes.arrayOf(\n    PropTypes.string.isRequired,\n  ).isRequired,\n  filtered: PropTypes.func.isRequired,\n  filter: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.bool,\n  ]).isRequired,\n};\n\nexport default TodosFilter;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass NewTodo extends Component {\n  state = {\n    title: '',\n  }\n\n  handleChangeInput = (evt) => {\n    this.setState({\n      title: evt.target.value,\n    });\n  }\n\n  getRandom = () => (1 + Math.random());\n\n  handleSubmitTodo = (evt) => {\n    evt.preventDefault();\n\n    if (this.state.title !== '') {\n      const todo = {\n        id: `${this.getRandom()}`,\n        title: this.state.title.trim(),\n        completed: false,\n      };\n\n      this.props.addTodo(todo);\n\n      this.setState({\n        title: '',\n      });\n    }\n  }\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmitTodo}>\n        <input\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          name={title}\n          value={title}\n          onChange={this.handleChangeInput}\n        />\n      </form>\n    );\n  }\n}\n\nNewTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n\nexport default NewTodo;\n","import React from 'react';\nimport TodoList from './components/TodoList';\nimport TodosFilter from './components/TodosFilter';\nimport NewTodo from './components/NewTodo';\n\nconst filterTypes = ['All', 'Active', 'Completed'];\n\nconst filterTodos = (todos, filter) => {\n  if (filter === 'Active') {\n    return todos.filter(todo => todo.completed === false);\n  }\n\n  if (filter === 'Completed') {\n    return todos.filter(todo => todo.completed === true);\n  }\n\n  return todos;\n};\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    visibleTodos: [],\n    filter: 'All',\n  }\n\n  addTodo = (todo) => {\n    const { filter, todos } = this.state;\n\n    this.setState(() => {\n      const allTodos = [...todos, todo];\n\n      return {\n        todos: allTodos,\n        visibleTodos: filterTodos(allTodos, filter),\n      };\n    });\n  }\n\n  toggledCheck = (id, checked) => {\n    const { filter } = this.state;\n\n    this.setState((prevState) => {\n      const allTodos = prevState.todos.map(todo => (\n        todo.id === id\n          ? {\n            ...todo, completed: checked,\n          }\n          : todo\n      ));\n\n      return {\n        todos: allTodos,\n        visibleTodos: filterTodos(allTodos, filter),\n      };\n    });\n  }\n\n  filtered = (evt) => {\n    const filter = evt.target.getAttribute('data-filter');\n    const { todos } = this.state;\n\n    this.setState(() => {\n      const allTodos = [...todos];\n\n      return {\n        visibleTodos: filterTodos(allTodos, filter),\n        filter,\n      };\n    });\n  }\n\n  deleteTask = (id) => {\n    const { filter } = this.state;\n\n    this.setState((prevState) => {\n      const allTodos = prevState.todos.filter(todo => todo.id !== id);\n\n      return {\n        todos: allTodos,\n        visibleTodos: filterTodos(allTodos, filter),\n      };\n    });\n  }\n\n  clearCompleted = () => {\n    const { filter } = this.state;\n\n    this.setState((prevState) => {\n      const allTodos = prevState.todos.filter(todo => !todo.completed);\n\n      return {\n        todos: allTodos,\n        visibleTodos: filterTodos(allTodos, filter),\n      };\n    });\n  }\n\n  checkedAll = ({ target }) => {\n    const { checked } = target;\n\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => ({\n        ...todo,\n        completed: checked,\n      })),\n      visibleTodos: prevState.todos.map(todo => ({\n        ...todo,\n        completed: checked,\n      })),\n    }));\n  }\n\n  render() {\n    const { todos, visibleTodos, filter } = this.state;\n    const activeTodos = todos.filter(todo => !todo.completed);\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <NewTodo addTodo={this.addTodo} />\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            checked={todos.length && todos.every(todo => todo.completed)}\n            onClick={this.checkedAll}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          <TodoList\n            todos={visibleTodos}\n            toggledCheck={this.toggledCheck}\n            deleteTask={this.deleteTask}\n          />\n        </section>\n\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {`${activeTodos.length} items left`}\n          </span>\n          <TodosFilter\n            filtered={this.filtered}\n            filterTypes={filterTypes}\n            filter={filter}\n          />\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={this.clearCompleted}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}